var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = PointSampler","category":"page"},{"location":"#PointSampler","page":"Home","title":"PointSampler","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [PointSampler]","category":"page"},{"location":"#PointSampler.bad_indices","page":"Home","title":"PointSampler.bad_indices","text":"Indices of vectors in set that violate the box constraints lb or ub.\n\n\n\n\n\n","category":"function"},{"location":"#PointSampler.discard_bad_seeds!","page":"Home","title":"PointSampler.discard_bad_seeds!","text":"Delete vectors from array seeds that violate the box constraints lb and ub.\n\n\n\n\n\n","category":"function"},{"location":"#PointSampler.distance-Tuple{Array{R,1} where R<:Real,Array{var\"#s12\",1} where var\"#s12\"<:(Array{R,1} where R<:Real)}","page":"Home","title":"PointSampler.distance","text":"Return Euclidean distance from p1 to every point in P.\n\n\n\n\n\n","category":"method"},{"location":"#PointSampler.good_indices","page":"Home","title":"PointSampler.good_indices","text":"Indices of vectors in set that conform to the box constraints lb or ub.\n\n\n\n\n\n","category":"function"},{"location":"#PointSampler.monte_carlo_th","page":"Home","title":"PointSampler.monte_carlo_th","text":"Scale the design returned by the unconstrained version of this  function to the box defined by lb and ub.\n\n\n\n\n\n","category":"function"},{"location":"#PointSampler.monte_carlo_th-Tuple{Int64,Int64}","page":"Home","title":"PointSampler.monte_carlo_th","text":"montecarloth( npoints = 10, ndims = 2; seeds = [], spawnfactor = 50, pdistthreshold_tolerance = 0.5 )\n\nReturn an array of length n_points containing real vectors  representing points in space with n_dims dimensions. The points are iteratively chosen from random point  sets to maximize a space-filling criterion as described in\n\n\"Surrogate Modelling of Computer Experiments with Sequential Experimental Design.\", Crombecq, 2011\n\nThe returned point set is constructed starting with the points in seeds.  If seeds is empty (default), then the singleton set containing the zero vector is used.\n\n\n\n\n\n","category":"method"},{"location":"#PointSampler.projected_distance-Tuple{Array{R,1} where R<:Real,Array{R,1} where R<:Real}","page":"Home","title":"PointSampler.projected_distance","text":"Return the minium projected distance between two point vectors p1 and p2, i.e. the minimum absolute value of the differences of the coordinates of p1 and p2.\n\n\n\n\n\n","category":"method"},{"location":"#PointSampler.projected_distance-Tuple{Array{R,1} where R<:Real,Array{var\"#s12\",1} where var\"#s12\"<:(Array{R,1} where R<:Real)}","page":"Home","title":"PointSampler.projected_distance","text":"Return array of projected distances for point p1 against every point in P.\n\n\n\n\n\n","category":"method"},{"location":"#PointSampler.projected_distance_thresholded","page":"Home","title":"PointSampler.projected_distance_thresholded","text":"Return array of projected distances for point p1 against every point in P, but every value below threshold is set to 0.0.\n\n\n\n\n\n","category":"function"}]
}
